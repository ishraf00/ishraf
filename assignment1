#include â€¹stdio.h> 
#include <stdlib.h>
#include <unistd.h>
#include <signal.h> 
#include <errno.n>
#include <sys/types.h> 
#include <sys/wait.h>

#define PIN_LENGTH 4
#define PIN_WAIT_INTERVAL 2
void getPIN(char pin[PIN_LENGTH + 1])
{
srand (getpid() + getpid());
pin [0] = 49 + rand()%7;
for (int i=1; i<PIN_LENGTH; i++)
{
pin[i] = 48 + rand()&7;
}
pin[PIN_LENGTH] = '\0';
void sigint _handler(int sig);
}
void sigint_handler (int sig) ;
int main (void)
{
signal (SIGINT, sigint _handler) ;
while(1)
int pipefds [2];
char pin[PIN_LENGTH + 11];
char buffer [PIN_LENGTH + 1];
char s[100];
char string[100];
pipe(pipefds);
pid_ pid=fork();

if (signal (SIGINT, sigint _handler)== SIG_ERR)
{
perror("signal");
exit (1);
}
else if (pid==0)
{
getPIN(pin);
close (pipefds [0]);
write (pipefds[1], pin, PIN_LENGTH + 1);
printf ("What is the message:");
fgets(string, 100 ,stdin);
printf("Processing the message.....\n");
sleep(PIN_WAIT_INTERVAL); 
printf("sending the %s, string);
sleep(PIN_ WAIT_INTERVAL)
exit(EXIT_SUCCESS);
}
else if (pid>o)
{
wait (NULL);
close (pipefds [1]) ;
read(pipefds [0], buffer, PIN_LENGTH + 1);
printf("\nthe child receive %s and %d from the parent \n", buffer, PIN_LENGTH + 1);
}
}
return EXIT_SUCCESS;
}
printf("PROGRAM HAS BEEN INTERRUPTED \n\n");
exit(1);
}
